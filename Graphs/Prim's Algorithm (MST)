import java.util.*;

class PrimsAlgorithm {
    static class Edge {
        int dest, weight;
        Edge(int d, int w) {
            dest = d;
            weight = w;
        }
    }

    public static void primsMST(int V, List<List<Edge>> adj) {
        boolean[] visited = new boolean[V];
        int[] parent = new int[V]; // Stores MST structure
        int[] key = new int[V]; // Stores min weight to reach a node
        Arrays.fill(key, Integer.MAX_VALUE);
        key[0] = 0; // Start from node 0
        parent[0] = -1;

        PriorityQueue<Edge> pq = new PriorityQueue<>(Comparator.comparingInt(e -> e.weight));
        pq.offer(new Edge(0, 0));

        for (int count = 0; count < V - 1; count++) {
            // Extract min weight vertex
            int u = pq.poll().dest;
            visited[u] = true;

            // Update adjacent vertices
            for (Edge neighbor : adj.get(u)) {
                int v = neighbor.dest;
                int weight = neighbor.weight;
                if (!visited[v] && weight < key[v]) {
                    key[v] = weight;
                    parent[v] = u;
                    pq.offer(new Edge(v, key[v]));
                }
            }
        }

        // Print MST edges
        System.out.println("Minimum Spanning Tree:");
        for (int i = 1; i < V; i++) {
            System.out.println(parent[i] + " - " + i);
        }
    }

    public static void main(String[] args) {
        int V = 5; // Number of vertices
        List<List<Edge>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());

        // Add edges (undirected graph)
        adj.get(0).add(new Edge(1, 2));
        adj.get(1).add(new Edge(0, 2));

        adj.get(0).add(new Edge(3, 6));
        adj.get(3).add(new Edge(0, 6));

        adj.get(1).add(new Edge(2, 3));
        adj.get(2).add(new Edge(1, 3));

        adj.get(1).add(new Edge(3, 8));
        adj.get(3).add(new Edge(1, 8));

        adj.get(1).add(new Edge(4, 5));
        adj.get(4).add(new Edge(1, 5));

        adj.get(2).add(new Edge(4, 7));
        adj.get(4).add(new Edge(2, 7));

        primsMST(V, adj);
    }
}

