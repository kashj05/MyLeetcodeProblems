import java.util.*;

class Dijkstra {
    static class Pair {
        int node, weight;
        Pair(int node, int weight) {
            this.node = node;
            this.weight = weight;
        }
    }

    public static void dijkstra(int V, List<List<Pair>> adj, int src) {
        // Distance array
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;

        // Priority Queue (Min-Heap) -> (distance, node)
        PriorityQueue<Pair> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a.weight));
        pq.offer(new Pair(src, 0));

        while (!pq.isEmpty()) {
            Pair current = pq.poll();
            int u = current.node;
            int d = current.weight;

            // Process all adjacent nodes
            for (Pair neighbor : adj.get(u)) {
                int v = neighbor.node;
                int weight = neighbor.weight;

                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.offer(new Pair(v, dist[v]));
                }
            }
        }

        // Print the shortest distances
        System.out.println("Shortest distances from source " + src + ":");
        for (int i = 0; i < V; i++) {
            System.out.println("To node " + i + " -> " + dist[i]);
        }
    }

    public static void main(String[] args) {
        int V = 5; // Number of vertices
        List<List<Pair>> adj = new ArrayList<>();

        // Initialize adjacency list
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        // Add edges (undirected graph)
        adj.get(0).add(new Pair(1, 10));
        adj.get(0).add(new Pair(4, 3));
        adj.get(1).add(new Pair(2, 2));
        adj.get(1).add(new Pair(4, 4));
        adj.get(2).add(new Pair(3, 9));
        adj.get(3).add(new Pair(2, 7));
        adj.get(4).add(new Pair(1, 1));
        adj.get(4).add(new Pair(2, 8));

        int source = 0;
        dijkstra(V, adj, source);
    }
}

