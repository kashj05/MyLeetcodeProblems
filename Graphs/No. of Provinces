import java.util.*;

public class NumberOfProvincesDFS {
    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
        boolean[] visited = new boolean[n];
        int provinces = 0;

        for (int i = 0; i < n; i++) {
            if (!visited[i]) { 
                dfs(isConnected, visited, i);
                provinces++;
            }
        }
        return provinces;
    }

    private void dfs(int[][] isConnected, boolean[] visited, int city) {
        visited[city] = true;
        for (int neighbor = 0; neighbor < isConnected.length; neighbor++) {
            if (isConnected[city][neighbor] == 1 && !visited[neighbor]) {
                dfs(isConnected, visited, neighbor);
            }
        }
    }

    public static void main(String[] args) {
        NumberOfProvincesDFS solution = new NumberOfProvincesDFS();
        int[][] isConnected = {
            {1,1,0},
            {1,1,0},
            {0,0,1}
        };
        System.out.println(solution.findCircleNum(isConnected)); // Output: 2
    }
}

