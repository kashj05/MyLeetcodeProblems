import java.util.HashMap;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        HashMap<Integer, Integer> rec = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            rec.put(inorder[i], i);
        }
        return helper(inorder, postorder, 0, inorder.length - 1, 0, postorder.length - 1, rec);
    }

    private TreeNode helper(int[] inorder, int[] postorder,
                            int inStart, int inEnd,
                            int postStart, int postEnd,
                            HashMap<Integer, Integer> rec) {
        if (inStart > inEnd || postStart > postEnd) return null;

        int val = postorder[postEnd];
        TreeNode root = new TreeNode(val);
        int idx = rec.get(val);
        int leftSubtreeSize = idx - inStart;

        root.left = helper(inorder, postorder,
                            inStart, idx - 1,
                            postStart, postStart + leftSubtreeSize - 1,
                            rec);

        root.right = helper(inorder, postorder,
                             idx + 1, inEnd,
                             postStart + leftSubtreeSize, postEnd - 1,
                             rec);

        return root;
    }
}
