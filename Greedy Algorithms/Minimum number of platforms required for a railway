import java.util.Arrays;

class Solution {
    public static int findPlatform(int[] arr, int[] dep, int n) {
        Arrays.sort(arr);
        Arrays.sort(dep);

        int platformsNeeded = 0;
        int maxPlatforms = 0;

        int i = 0; // pointer for arrival
        int j = 0; // pointer for departure

        // Traverse both arrays
        while (i < n && j < n) {
            if (arr[i] <= dep[j]) {
                platformsNeeded++;  // train arrives before last one departs
                i++;
            } else {
                platformsNeeded--;  // train has departed, free a platform
                j++;
            }
            maxPlatforms = Math.max(maxPlatforms, platformsNeeded);
        }

        return maxPlatforms;
    }

    // Example usage
    public static void main(String[] args) {
        int[] arr = {900, 940, 950, 1100, 1500, 1800};
        int[] dep = {910, 1200, 1120, 1130, 1900, 2000};
        int n = arr.length;

        System.out.println("Minimum platforms needed: " + findPlatform(arr, dep, n));  // Output: 3
    }
}
