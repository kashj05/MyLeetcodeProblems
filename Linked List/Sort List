/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head ==null || head.next==null){
            return head;
        }
        ListNode temp=head;
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null){
            temp=slow;
             slow=slow.next;
            fast=fast.next.next;
        }

        temp.next=null;//end of first half 
        ListNode left_side=sortList(head);
        ListNode right_side=sortList(slow);

        return merge(left_side,right_side);
    }
    public ListNode merge(ListNode l1,ListNode l2){
        ListNode sorted_temp=new ListNode(0);
        ListNode currnode=sorted_temp;

        while(l1!=null && l2!=null){
            if(l1.val<l2.val){
                currnode.next=l1;
                l1=l1.next;
            }
            else{
                 currnode.next=l2;
                l2=l2.next;
            }
            currnode=currnode.next;
        }
        if(l1!=null){
             currnode.next=l1;
                l1=l1.next;
        }
        if(l2!=null){
             currnode.next=l2;
                l2=l2.next;
        }
        return sorted_temp.next;
    }
}
