import java.util.*;

class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates); // Sort to handle duplicates
        backtrack(res, new ArrayList<>(), candidates, target, 0);
        return res;
    }

    private void backtrack(List<List<Integer>> res, List<Integer> tempList, int[] candidates, int target, int start) {
        if (target == 0) {
            res.add(new ArrayList<>(tempList)); // Add valid combination
            return;
        }
        
        for (int i = start; i < candidates.length; i++) {
            // Skip duplicate elements in the same recursive level
            if (i > start && candidates[i] == candidates[i - 1]) {
                continue;
            }
            
            if (candidates[i] > target) {
                break; // No need to check further as array is sorted
            }

            tempList.add(candidates[i]); // Choose element
            backtrack(res, tempList, candidates, target - candidates[i], i + 1); // Move to next index
            tempList.remove(tempList.size() - 1); // Backtrack
        }
    }
}
