class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> list=new ArrayList<>();
        List<String> templist=new ArrayList<>();
        backtrack(s,0,list,templist);
        return list;
    }
    private void backtrack(String s,int start,List<List<String>> list,List<String> templist){
        if(start==s.length()){
            list.add(new ArrayList<>(templist));
            return;
        }
        for(int i=start;i<s.length();i++){
            if(isPalindrome(s,start,i)){
                templist.add(s.substring(start,i+1));
                backtrack(s,i+1,list,templist);
                templist.remove(templist.size()-1);
            }
        }
    }
    public boolean isPalindrome(String s, int low,int high){
            while(low<high){
                if(s.charAt(low++)!=s.charAt(high--)){
                    return false;
                }
            }
             return true;
        }
    }
