/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null){
           return root;
       }
        if(root.val>key){
            root.left= deleteNode(root.left,key);
        }
        else if(root.val<key){
            root.right= deleteNode(root.right,key);
        }
        else{//root.data == key 
        //case 1 - leaf node
        if(root.left == null && root.right == null){
            return null;
        }
        //case 2 
        if(root.left==null){
            return root.right;
        }
        else if(root.right==null){
            return root.left;
        }
        //case 3
        //find inorder successor
        TreeNode Is = inorderSuccesor(root.right);
        root.val=Is.val;
        root.right=deleteNode(root.right,Is.val);
        }
        return root;

    }
    public TreeNode inorderSuccesor(TreeNode node){
        while(node.left!=null){
            node=node.left;
        }
        return node;

    }
}
