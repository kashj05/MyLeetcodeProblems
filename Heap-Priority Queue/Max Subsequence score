class Solution {
    public long maxScore(int[] nums1, int[] nums2, int k) {
        int n = nums1.length;
        int[][] pairs = new int[n][2];
        for(int i = 0; i < n; i++){
            pairs[i] = new int[] {nums1[i], nums2[i]};
        }
        Arrays.sort(pairs, (a,b) -> b[1] - a[1]);
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        long ksum = 0;
        for(int i = 0; i < k; i++){
            ksum += pairs[i][0];
            pq.add(pairs[i][0]);
        }
        long answer = ksum * pairs[k-1][1];
        for(int i = k; i < n; i++){
            int prev_small = pq.poll();
            ksum += pairs[i][0] - prev_small;
            pq.add(pairs[i][0]);
            answer = Math.max(answer, ksum *  pairs[i][1]);
        }
        return answer;
    }
}
